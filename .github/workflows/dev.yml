
# name: Deploy Terraform to AWS Dev

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#   workflow_dispatch:
# permissions: write-all
# # contents: read
# # issues: write
# env: 
#   AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
#   AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}



# # jobs:
# #   tf-plan:
# #     if: github.event_name == 'pull_request'
# #     name: tfplan
# #     runs-on: ubuntu-latest
# #     steps:
# #       # Step 1: Checkout the repository
# #       - name: Checkout repository
# #         #if: github.event_name == 'pull_request'
# #         uses: actions/checkout@v3

# #       # Step 2: Set up Terraform CLI
# #       - name: Setup Terraform
# #         #if: github.event_name == 'pull_request'
# #         uses: hashicorp/setup-terraform@v2

# #       - name: Initial Terraform
# #         #if: github.event_name == 'pull_request'
# #         run: terraform init

# #       - name: Validate Terraform Code
# #         #if: github.event_name == 'pull_request'
# #         run: terraform validate

# #       - name: Terraform Plan
# #         id: plan
# #         #if: github.event_name == 'pull_request'
# #         run: terraform plan -input=false -no-color
# #       - name: add-plan-comment
# #         id: comment
# #         uses: actions/github-script@v3
# #        #if: github.event_name == 'pull_request'
# #         env:
# #           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
# #         with:
# #           github-token: ${{ secrets.GITHUB_TOKEN }}
# #           script: |
# #             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
# #             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
# #             #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
# #             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
# #             <details><summary>Show Plan</summary>
            
# #             \`\`\`${process.env.PLAN}\`\`\`
            
# #             </details>
            
# #             *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
# #             github.issues.createComment({
# #               issue_number: context.issue.number,
# #               owner: context.repo.owner,
# #               repo: context.repo.repo,
# #               body: output
# #             })
# #       - name: Scan Terraform Codes
# #         if: github.event_name == 'pull_request'
# #         uses: snyk/actions/iac@master
# #         env:
# #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# #         # with:
# #         #   args: --report
# #         continue-on-error: true
  
# #   # tf-scan:
# #   #   needs: tf-plan
# #   #   runs-on: ubuntu-latest
# #   #   if: github.ref == 'refs/heads/main' && github.event_name == 'pull_request'
# #   #   steps:
# #   #     - name: Checkout repository
# #   #       uses: actions/checkout@v3
        
# #   #     # Step 2: Set up Terraform CLI
# #   #     - name: Setup Terraform
# #   #       uses: hashicorp/setup-terraform@v2

# #   #     - name: Scan Terraform Codes
# #   #       uses: snyk/actions/iac@master
# #   #       env:
# #   #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# #   #       # with:
# #   #       #   args: --report
# #   #       continue-on-error: true

# #   tf-apply:
# #     needs: tf-plan
# #     runs-on: ubuntu-latest
# #     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
# #     steps:
# #       - name: Checkout repository
# #         uses: actions/checkout@v3

# #       # Step 2: Set up Terraform CLI
# #       - name: Setup Terraform
# #         uses: hashicorp/setup-terraform@v2

# #       - name: Initial Terraform
# #         run: terraform init

# #       - name: Terraform Apply
# #         run: echo "Terraform Apply Successfully"

# This is a basic workflow to help you get started with Actions

name: Provision Terraform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  terraform-plan:
    #if: github.ref == 'refs/heads/main' && github.event_name == 'pull_request'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

        #continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        #continue-on-error: true

      # Runs a single command using the runners shell
    #   - name: GHA Terraform
    #     run: echo "Welcome to my GHA Terraform Test"

    #   # Runs a set of commands using the runners shell
    #   - name: Display Date and Time
    #     run: |
    #       date
    #       cat /etc/os-release
  terraform-apply: 
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: terraform-plan
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Deploy Terraform
          run: echo "Terraform Apply"
       