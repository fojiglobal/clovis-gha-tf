name: Build and Publish to ECR

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: "./docker/"
jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2" # e.g., us-east-1

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build Docker image
      - name: Build Docker image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.ECR_REPOSITORY_NAME}}
            IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    #   # Step 5: Scan Docker image with Snyk
    #   - name: Snyk Security Scan
    #     uses: snyk/actions/docker@master
    #     with:
    #       image: finance-app:latest
    #       args: --severity-threshold=high --report
    #     env:
    #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #     continue-on-error: true

      # Step 6: Tag the Docker image for ECR
    #   - name: Tag Docker image
    #     run: |
    #       IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
    #       docker tag webapp:latest $IMAGE_URI
    #       echo $IMAGE_URI
    #     id: image-tag

      # Step 7: Push Docker image to ECR  # docker push ${{ steps.image-tag.outputs.IMAGE_URI }}
    #   - name: Push Docker image to ECR
    #     run: |
    #       docker image push '${{ steps.image-tag.outputs.IMAGE_URI }}'

         